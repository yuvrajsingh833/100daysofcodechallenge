//100daysofcodechallenge

//Day-1(Module-13 Arrays)-26/06/2024

import java.util.Scanner;

//1. Creating an array

/* public class ArraysCC {

    public static void main(String[] args) {
        int marks[]=new int[50];
        int numbers={1,2,3};
        String fruits[]={"Mango","Apple","Orange"};
    }
} */

//2. Input, Output and Updating an array



/* public class ArraysCC {

   public static void main(String[] args) {
    int marks[]= new int[50];

    // Input an array

    Scanner sc=new Scanner(System.in);
    marks[0]=sc.nextInt(); //phy
    marks[1]=sc.nextInt();//Chem
    marks[2]=sc.nextInt();//Math

    //output an array

    System.out.println("Physics marks : "+marks[0]);
    System.out.println("Chemistry marks : "+marks[1]);
    System.out.println("Maths marks : "+marks[2]);

    //Updating an array

    marks[2]=marks[2]+4;
    System.out.println("Updated Maths marks : "+marks[2]);

    int percentage=(marks[0] +marks[1]+marks[2])*100/300;
    System.out.println("Percentage is: " +percentage +" %");

   } 
} */

//Passing an array as argument- Pass by reference

/* public class ArraysCC {

    public static void updateMarks(int marks[],int nonChanagble){
        nonChanagble=10;
        for(int i=0;i<marks.length;i++){
            marks[i]=marks[i]+2;
        }
    }

    public static void main(String[] args) {
        int marks[]={97,85,84};
        int nonChanagble=5;
        updateMarks(marks,nonChanagble);
        System.out.println(nonChanagble);

        //printing updated marks

        for(int i=0;i<marks.length;i++){
            System.out.print(marks[i] +" ");
        }
        System.out.println();
    }
} */


//Linear Search Algorithm- T.C-O(n)

/* public class ArraysCC {

    public static int linearSearch(int numbers[],int key){
        for(int i=0;i<numbers.length;i++){
            if(numbers[i]==key){
                return i;
            }
        }
       return -1; 
    }

    public static void main(String[] args) {
        int numbers[]={2,4,6,8,10,12,14,16,18,20};
        int key=18;

        int index=linearSearch(numbers, key);
        if(index==-1){
            System.out.println("Key not found "+ index);
        }else{
            System.out.println("Key is found at index: " + index);
        }
    }
}
 */


//String Linear Search-- T.C-O(n)

/* public class ArraysCC {

    public static int linearSearch(String fruits[],String key){
        for(int i=0;i<fruits.length;i++){
            if(fruits[i]==key){
                return i;
            }
        }
       return -1; 
    }

    public static void main(String[] args) {
        String fruits[]={"Mango","Apple","Orange","Grapes"};
        String key="Orange";

        int index=linearSearch(fruits, key);
        if(index==-1){
            System.out.println("Key not found "+ index);
        }else{
            System.out.println("Key is found at index: " + index);
        }
    }
}

 */

 //largest and smallest number in an array- T.C-O(n)

 /* public class ArraysCC {

    public static int getLargest(int number[]){
        int largest=Integer.MIN_VALUE;
        int smallest=Integer.MAX_VALUE;
        for(int i=0;i<number.length;i++){
            if(largest<number[i]){
                largest=number[i];
            }if(smallest>number[i]){
                smallest=number[i];
            }
            System.out.println("Smallest Number is "+ smallest);
        }
        return largest;
    }
 
    public static void main(String[] args) {
        int number[]={1,2,6,3,5};
        System.out.println("Smallest Number is "+ getLargest(number));
    }
 } */



//Binary Search Algorithm

/* public class ArraysCC {

    public static int binarySearch(int numbers[],int key){
        int start=0,end=numbers.length-1;
        
        while (start<=end) {
            int mid=(start+end)/2;

            //comparison

            if(numbers[mid]==key){ //found
                return mid;
            }if(numbers[mid]>key){//left
                end=mid-1;
            }else{ //right
                start=mid+1;
            }
        }

        return -1;
    }

    public static void main(String[] args) {
        int numbers[]={2,4,6,8,10,12,14,16};
        int key=12;
        System.out.println("Key is at index : "+ binarySearch(numbers, key));
    }
}
  */

//Reverse an array- T.C-O(n)

/* public class ArraysCC {
    public static void reverseArray(int numbers[]){
        int first=0,last=numbers.length-1;

        while (first<last) {


            
            
            int temp=numbers[last];
            numbers[last]=numbers[first];
            numbers[first]=temp;
            
            first++;
            last--;

        }
    }

    public static void main(String[] args) {
        int numbers[]={2,4,6,8,10};
        reverseArray(numbers);
        
        //printing reverse array

        for(int i=0;i<numbers.length;i++){
            System.out.print(numbers[i]+" ");
        }
    
    }
} */

