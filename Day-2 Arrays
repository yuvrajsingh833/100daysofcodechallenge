//Day-2(Module-13- Arrays)-27/06/2024

//Pairs in an array

/* public class ArraysCC {

    public static void pairsInArray(int number[]){
        int tp=0;
    
        for(int i=0;i<number.length;i++){
            int curr=number[i];
            for(int j=i+1;j<number.length;j++){
                System.out.print("("+curr+","+ number[j]+")" + " ");
                tp++;
            }
            System.out.println();
        }
        System.out.println("Total Number os pairs is: " +tp);
    }

    public static void main(String[] args) {
        int number[]={2,4,6,8,10,12};
        pairsInArray(number);
    }
} */

//Print Sub Arrays

/* public class ArraysCC {
    public static void subArrays(int number[]){
        int ts=0;
        for(int i=0;i<number.length;i++){
            for(int j=i;j<number.length;j++){
                for(int k=i;k<=j;k++){
                    System.out.print(number[k]+" ");
                }
                System.out.println();
                ts++;
            }
            System.out.println();
        }
        System.out.println("Total number of subarray is:  "+ts);
    }

    public static void main(String[] args) {
        int number[]={2,4,6,8,10};
        subArrays(number);
    }
} */

//Maximum Sub Array Sum

/* public class ArraysCC {

    public static void maxSumSubArray(int number[]){
        int currSum=0;
        int maxSum=Integer.MIN_VALUE;

        for(int i=0;i<number.length;i++){
            for(int j=i;j<number.length;j++){
                currSum=0;
                for(int k=i;k<=j;k++){
                    currSum+=number[k];
                }
                System.out.println(currSum);
                if(currSum>maxSum){
                    maxSum=currSum;
                }
            }
            System.out.println();
        }
        System.out.println("Max Sum is: "+ maxSum);
    }

    public static void main(String[] args) {
        int number[]={1,-2,6,-1,3};
        maxSumSubArray(number);

    }
} */


//Maxium SubArray Sum(Prefix Sub Array Sum)

/* public class ArraysCC {

    public static void prefixMaxSubArraySum(int number[]){
        int currSum=0;
        int maxSum=Integer.MIN_VALUE;
        int prefix[]=new int[number.length];

        prefix[0]=number[0];
        for(int i=1;i<number.length;i++){
            prefix[i]=prefix[i-1]+number[i];
        }

        for(int i=0;i<number.length;i++){
            for(int j=0;j<number.length;j++){
                currSum= i==0?prefix[j]:prefix[j]-prefix[i-1];
            }if(currSum>maxSum){
                maxSum=currSum;
            }
        }
        System.out.println("Max sum is: "+maxSum);
    }
    public static void main(String[] args) {
        int number[]={1,-2,6,-1,3};
        prefixMaxSubArraySum(number);
    }
} */


//Max Subarray Sum(Kadanes Algorithm)

/* public class ArraysCC {
    public static void kadanes(int number[]){
        int cs=0;
        int ms=Integer.MIN_VALUE;

        for(int i=0;i<number.length;i++){
            cs+=number[i];
            if(cs<0){
                cs=0;
            }
            ms=Math.max(cs,ms);
        }

        System.out.println("Max sum is: "+ms);

    }

    public static void main(String[] args) {
        int number[]={-2,-3,4,-1,-2,1,5,-3};
        kadanes(number);
    }
} */


//Trapping Water

/* public class ArraysCC {
    public static int trappedWater(int height[]){
        int n=height.length;
        int trappedWater=0;
        //find left most boundary array
        int leftMax[]=new int[height.length];
        leftMax[0]=height[0];
        for(int i=1;i<height.length;i++){
            leftMax[i]=Math.max(height[i],leftMax[i-1]);
        }

        //find right most boundary array
        int rightMax[]=new int[height.length];
        rightMax[n-1]=height[n-1];
        for(int i=n-2;i>=0;i--){
            rightMax[i]=Math.max(height[i], rightMax[i+1]);
        }
        //loop
        for(int i=0;i<n;i++){
            //waterlevel=min(left most boundary,right most boundary)
          int waterlevel=Math.min(leftMax[i], rightMax[i]);
          //trapped water=waterlevel-height
          trappedWater+=waterlevel-height[i];
        }

        return trappedWater;
        
        


    }
    public static void main(String[] args) {
        int height[]={4,2,0,6,3,2,5};
        System.out.println("Trapped Water is: "+trappedWater(height));
    }
} */


//Buy and sell stock

/* public class ArraysCC {

    public static int buyAndSellStock(int price[]){
        int buyPrice=Integer.MAX_VALUE;
        int maxProfit=0;

        for(int i=0;i<price.length;i++){
            if (buyPrice<price[i]){
                int profit=price[i]-buyPrice; //today's profit
                maxProfit=Math.max(maxProfit, profit);

            }else{
                buyPrice=price[i];
            }
        }
        return maxProfit;
    }
    public static void main(String[] args) {
        int price[]={7,1,5,3,6,4};
        System.out.println(buyAndSellStock(price));
    }
} */
